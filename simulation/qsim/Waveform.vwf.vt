// Copyright (C) 2022  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/22/2023 16:15:28"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          tpriscv_g4
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module tpriscv_g4_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk_core1;
reg ena;
reg VCC;
// wires                                               
wire [31:0] busA_EX;
wire [31:0] busB_EX;
wire [31:0] busC_MA;
wire [31:0] data_WB;
wire ena_fetch;
wire [2:0] funct3_ID;
wire [31:0] imm_out_ID;
wire [31:0] inst_IF;
wire [2:0] num_bytes_MA;
wire [6:0] opcode_EX;
wire [6:0] opcode_ID;
wire [31:0] PC_IF;
wire ras_ena_ID;
wire [4:0] rd_EX;
wire [4:0] rd_ID;
wire [4:0] rd_WB;
wire [31:0] reg_siete;
wire [4:0] rs1_ID;
wire [4:0] rs2_ID;
wire signado_MA;
wire take_jmp_EX;
wire take_ras_ID;
wire [1:0] wrn_MA;

// assign statements (if any)                          
tpriscv_g4 i1 (
// port map - connection between master ports and signals/registers   
	.busA_EX(busA_EX),
	.busB_EX(busB_EX),
	.busC_MA(busC_MA),
	.clk_core1(clk_core1),
	.data_WB(data_WB),
	.ena(ena),
	.ena_fetch(ena_fetch),
	.funct3_ID(funct3_ID),
	.imm_out_ID(imm_out_ID),
	.inst_IF(inst_IF),
	.num_bytes_MA(num_bytes_MA),
	.opcode_EX(opcode_EX),
	.opcode_ID(opcode_ID),
	.PC_IF(PC_IF),
	.ras_ena_ID(ras_ena_ID),
	.rd_EX(rd_EX),
	.rd_ID(rd_ID),
	.rd_WB(rd_WB),
	.reg_siete(reg_siete),
	.rs1_ID(rs1_ID),
	.rs2_ID(rs2_ID),
	.signado_MA(signado_MA),
	.take_jmp_EX(take_jmp_EX),
	.take_ras_ID(take_ras_ID),
	.\VCC (VCC),
	.wrn_MA(wrn_MA)
);
initial 
begin 
#1000000 $finish;
end 

// VCC
initial
begin
	VCC = 1'b1;
end 

// ena
initial
begin
	ena = 1'b1;
end 

// clk_core1
always
begin
	clk_core1 = 1'b0;
	clk_core1 = #10000 1'b1;
	#10000;
end 
endmodule

